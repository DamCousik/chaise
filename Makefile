# Makefile rules

# Disable built-in rules
.SUFFIXES:

# Project name
PROJ=chaise

# Node module dependencies
MODULES=node_modules

# Node bin scripts
BIN=$(MODULES)/.bin

# Bower front end components
BOWER=bower_components

# JavaScript source and test specs
JS=scripts
SOURCE=$(JS)/variables.js \
					$(JS)/utils.js \
					$(JS)/ermrest.js \
					chaise-config.js \
					$(JS)/app.js \
					$(JS)/facetsModel.js \
					$(JS)/facetsService.js \
					$(JS)/controller/ermrestDetailController.js \
					$(JS)/controller/ermrestFilterController.js \
					$(JS)/controller/ermrestInitController.js \
					$(JS)/controller/ermrestLoginController.js \
					$(JS)/controller/ermrestLogoutController.js \
					$(JS)/controller/ermrestResultsController.js \
					$(JS)/controller/ermrestSideBarController.js

# List test specs here
#SPECS=$(JS)/main_spec.js

# Distribution target
DIST=dist

# Project package full/minified
PKG=$(DIST)/$(PROJ).js
MIN=$(DIST)/$(PROJ).min.js

# Documentation target
DOC=doc
API=$(DOC)/api.md
JSDOC=jsdoc

# Hidden target files (for make only)
LINT=.make-lint
TEST=.make-test.js

.PHONY: all
all: lint build test $(DOC)

.PHONY: build
build: $(PKG) $(MIN) app.html

# Rule to build the full library
$(PKG): $(SOURCE) $(BIN)
	mkdir -p $(DIST)
	cat $(SOURCE) > $(PKG)

# Rule to build the minified package
$(MIN): $(SOURCE) $(BIN)
	mkdir -p $(DIST)
	$(BIN)/ccjs $(SOURCE) > $(MIN)

# Rule to lint the source (only changed source is linted)
$(LINT): $(SOURCE) $(BIN)
	$(BIN)/jshint $(filter $(SOURCE), $?)
	@touch $(LINT)

.PHONY: lint
lint: $(LINT)

# Rule for making markdown docs
$(DOC): $(API)

# Rule for making API doc
$(API): $(SOURCE) $(BIN)
	mkdir -p $(DOC)
	$(BIN)/jsdoc2md $(SOURCE) > $(API)

# jsdoc: target for html docs produced (using 'jsdoc')
$(JSDOC): $(SOURCE) $(BIN)
	mkdir -p $(JSDOC)
	$(BIN)/jsdoc --pedantic -d $(JSDOC) $(SOURCE)
	@touch $(JSDOC)

# Rule to ensure Node bin scripts are present
$(BIN): $(MODULES)
	@touch $(BIN)

# Rule to install Node modules locally
$(MODULES): package.json
	npm install
	@touch $(MODULES)

# Rule to install Bower front end components locally
$(BOWER): $(BIN) bower.json
	$(BIN)/bower install
	@touch $(BOWER)

.PHONY: deps
deps: $(BIN) $(BOWER)

.PHONY: updeps
updeps:
	npm update
	$(BIN)/bower update

# Rule to clean project directory
.PHONY: clean
clean:
	rm -rf $(DIST)
	rm -rf $(JSDOC)
	rm -f .make-*

# Rule to clean the dependencies too
.PHONY: distclean
distclean: clean
	rm -rf $(MODULES)
	rm -rf $(BOWER)

.PHONY: test
test: $(TEST)

# Rule to run the unit tests
$(TEST): $(SOURCE) $(SPECS) $(BIN)
	cat $(SOURCE) $(SPECS) > $(TEST)
	$(BIN)/mocha $(TEST) || (rm -f $(TEST) &&  exit 1)

# Rule to run testem
.PHONY: testem
testem:
	$(BIN)/testem

# Rules to attach checksums to JavaScript source in the header
app.html: app.html.in .make-script-block
	sed -e '/%SCRIPTS%/ {' -e 'r .make-script-block' -e 'd' -e '}' app.html.in > app.html

.make-script-block: $(SOURCE)
	> .make-script-block
	for file in $(SOURCE); do \
		checksum=$$(md5 -q $$file | awk '{ print $$1 }') ; \
		echo "<script src='$$file?v=$$checksum'></script>" >> .make-script-block ; \
	done

# Rules for help/usage
.PHONY: help usage
help: usage
usage:
	@echo "Available 'make' targets:"
	@echo "    all       - an alias for build"
	@echo "    deps      - local install of node and bower dependencies"
	@echo "    updeps    - update local dependencies"
	@echo "    lint      - lint the source"
	@echo "    build     - builds the package"
	@echo "    test      - runs commandline tests"
	@echo "    testem    - starts the testem service"
	@echo "    doc       - make autogenerated markdown docs"
	@echo "    jsdoc     - make autogenerated html docs"
	@echo "    clean     - cleans the dist dir"
	@echo "    distclean - cleans the dist dir and the dependencies"
